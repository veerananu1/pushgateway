import unittest
from unittest.mock import patch, MagicMock

from your_script import get_current_time_cst, get_metrics, parse_job_metrics, delete_job


class TestPrometheusJobDeletion(unittest.TestCase):

    @patch('your_script.get_metrics')
    def test_successful_deletion(self, mock_get_metrics):
        # Mock data with a job metric within deletion threshold
        mock_data = """
        # HELP prometheus Push time of the latest scrape
        push_time_seconds 1654812800  # 2023-06-10 17:00:00 UTC
        job="my_job" label1="value1" label2=""
        """
        mock_get_metrics.return_value = mock_data

        # Mock current time
        mock_current_time = MagicMock()
        mock_current_time.return_value = datetime.datetime(2023, 6, 11, 0, 0)  # Adjust as needed
        with patch('your_script.get_current_time_cst', return_value=mock_current_time):
            parse_job_metrics(mock_data)
            delete_job.assert_called_once_with('/metrics/job/my_job/label1')

    @patch('your_script.get_metrics')
    def test_no_metrics_fetched(self, mock_get_metrics):
        mock_get_metrics.return_value = None
        self.assertRaises(AssertionError, get_metrics, 'http://localhost:9090')

    @patch('your_script.get_metrics')
    def test_error_fetching_metrics(self, mock_get_metrics):
        mock_get_metrics.side_effect = requests.RequestException('Connection error')
        self.assertRaises(AssertionError, get_metrics, 'http://localhost:9090')

    @patch('your_script.parse_job_metrics')
    def test_error_parsing_metrics(self, mock_parse_metrics):
        mock_data = 'invalid data'
        mock_parse_metrics.side_effect = Exception('Parsing error')
        self.assertRaises(AssertionError, parse_job_metrics, mock_data)

    @patch('your_script.get_metrics')
    def test_no_jobs_to_delete(self, mock_get_metrics):
        mock_data = 'valid data (without push_time_seconds)'
        mock_get_metrics.return_value = mock_data
        for _, _, _ in parse_job_metrics(mock_data):
            pass
        delete_job.assert_not_called()

    @patch('your_script.delete_job')
    def test_deletion_request_accepted(self, mock_delete_job):
        mock_delete_job.return_value = MagicMock(status_code=202)
        delete_job('/metrics/job/path')
        # Assert successful deletion message with current time

    @patch('your_script.delete_job')
    def test_deletion_successful(self, mock_delete_job):
        mock_delete_job.return_value = MagicMock(status_code=200)
        delete_job('/metrics/job/path')
        # Assert successful deletion message

    @patch('your_script.delete_job')
    def test_job_not_found(self, mock_delete_job):
        mock_delete_job.return_value = MagicMock(status_code=404)
        delete_job('/metrics/job/path')
        # Assert job not found message

    @patch('your_script.delete_job')
    def test_unexpected_deletion_error(self, mock_delete_job):
        mock_delete_job.side_effect = Exception('Delete error')
        self.assertRaises(AssertionError, delete_job, '/metrics/job/path')

    def test_environment_variable_not_set(self):
        with patch.dict('os.environ', {'CCT_PUSHGATE_URL': ''}):
            self.assertEqual([], os.environ.get('CCT_PUSHGATE_URL').split(','))


if __name__ == '__main__':
    unittest.main()
