import pytest
from unittest.mock import patch, MagicMock

# Patch the `get_current_time_cst` function
@pytest.fixture
def mock_get_current_time_cst():
    with patch('script.get_current_time_cst') as mock_func:
        yield mock_func

# Patch the `get_metrics` function
@pytest.fixture
def mock_get_metrics():
    with patch('script.get_metrics') as mock_func:
        yield mock_func

# Patch the `requests.get` function
@pytest.fixture
def mock_requests_get():
    with patch('requests.get') as mock_func:
        yield mock_func


def test_get_current_time_cst_success(mock_get_current_time_cst):
    mock_get_current_time_cst.return_value = datetime.datetime(2024, 4, 12)
    assert script.get_current_time_cst() == datetime.datetime(2024, 4, 12)


def test_get_current_time_cst_exception(mock_get_current_time_cst):
    mock_get_current_time_cst.side_effect = Exception("Test Exception")
    assert script.get_current_time_cst() is None


def test_get_metrics_success(mock_get_metrics):
    mock_response = MagicMock()
    mock_response.text = "test_metrics_data"
    mock_response.status_code = 200
    mock_get_metrics.return_value = mock_response
    assert script.get_metrics("base_url") == "test_metrics_data"


def test_get_metrics_failure(mock_get_metrics):
    mock_get_metrics.side_effect = requests.exceptions.RequestException("Test Exception")
    assert script.get_metrics("base_url") is None


def test_parse_job_metrics_success(mock_get_metrics):
    mock_metrics_data = """
# HELP push_time_seconds Seconds since Prometheus last received samples.
push_time_seconds 1654792000.123456
job="test_job" label1="value1"
"""
    mock_get_metrics.return_value = mock_metrics_data
    results = list(script.parse_job_metrics(mock_metrics_data))
    assert len(results) == 1
    assert results[0][0] == 1654792000
    assert results[0][1] == "/metrics/test_job/label1"
    assert results[0][2] == "/metrics/test_job/label1=value1"


def test_parse_job_metrics_no_data(mock_get_metrics):
    mock_get_metrics.return_value = ""
    results = list(script.parse_job_metrics(""))
    assert len(results) == 0


def test_parse_job_metrics_exception(mock_get_metrics):
    mock_get_metrics.side_effect = Exception("Test Exception")
    results = list(script.parse_job_metrics("invalid_data"))
    assert len(results) == 1
    assert results[0][0] is None
    assert results[0][1] is None
    assert results[0][2] is None


# Tests for delete_job require additional mocking (not shown here)
# for requests.delete
@pytest.fixture
def mock_requests_delete():
    with patch('requests.delete') as mock_func:
        yield mock_func


def test_delete_job_success(mock_requests_delete, mock_get_metrics):
    mock_metrics_data = """
# HELP push_time_seconds Seconds since Prometheus last received samples.
push_time_seconds 1654791000.123456
job="test_job" label1="value1"
"""
    mock_get_metrics.return_value = mock_metrics_data
    mock_response = MagicMock()
    mock_response.status_code = 202
    mock_requests_delete.return_value = mock_response

    script.delete_job("/metrics/test_job/label1=value1", "base_url/")
    assert mock_requests_delete.called

def test_delete_job_permanent_success(mock_requests_delete, mock_get_metrics):
    mock_metrics_data = """
# HELP push_time_seconds Seconds since Prometheus last received samples.
push_time_seconds 1654791000.123456
job="test_job" label1="value1"
"""
    mock_get_metrics.return_value = mock_metrics_data
    mock_response = MagicMock()
    mock_response.status_code = 200
    mock_requests_delete.return_value = mock_response

    script.delete_job("/metrics/test_job/label1=value1", "base_url/")
    assert mock_requests_delete.called

def test_delete_job_failure(mock_requests_delete, mock_get_metrics):
    mock_metrics_data = """
# HELP push_time_seconds Seconds since Prometheus last received samples.
push_time_seconds 1654791000.123456
job="test_job" label1="value1"
"""
    mock_get_metrics.return_value = mock_metrics_data
    mock_requests_delete.side_effect = requests.exceptions.RequestException("Test Exception")

    script.delete_job("/metrics/test_job/label1=value1", "base_url/")
    assert mock_requests_delete.called
