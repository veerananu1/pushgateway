import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.HttpStatusCodeException;
import lombok.extern.slf4j.Slf4j;

import java.util.concurrent.TimeUnit;

@Slf4j
@Service
public class MetricsPostService {

    @Value("${idcomm.url}")
    private String url;

    private final RestTemplate restTemplate;

    public MetricsPostService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public void postMetricsWithRetry(String prometheusMetrics) {
        final int retries = 3; // Number of retries
        final int retryDelaySeconds = 40; // Delay between retries

        for (int attempt = 1; attempt <= retries; attempt++) {
            try {
                restTemplate.postForObject(url + "/api/import/Prometheus", prometheusMetrics, String.class);
                log.info("Metrics posted successfully on attempt {}", attempt);
                return; // Exit method on success
            } catch (HttpStatusCodeException e) {
                log.error("Failed to post metrics on attempt {}", attempt, e);
                if (attempt < retries) {
                    retryWithDelay(retryDelaySeconds);
                } else {
                    log.error("All retry attempts failed.");
                    throw new RuntimeException("Failed to post metrics after " + retries + " attempts", e);
                }
            }
        }
    }

    private void retryWithDelay(int delaySeconds) {
        try {
            log.info("Retrying after {} seconds...", delaySeconds);
            TimeUnit.SECONDS.sleep(delaySeconds);
        } catch (InterruptedException ie) {
            Thread.currentThread().interrupt();
            log.error("Retry interrupted", ie);
        }
    }
}
