import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.ImmutableTag;
import io.micrometer.core.instrument.Tag;
import io.micrometer.core.instrument.Clock;
import io.micrometer.prometheus.PrometheusConfig;
import io.micrometer.prometheus.PrometheusMeterRegistry;
import io.prometheus.client.CollectorRegistry;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import com.u.ccti.applicationmetrics.representations.PromMetric;

import java.util.ArrayList;
import java.util.Map;

@Slf4j
@Service
@Component
public class IdcommCounterService {
    
    @Value("${idcomm.url}")
    private String url;

    @Value("${idcomm.applicationname}")
    private String applicationName;

    @Value("${idcomm.teamname}")
    private String teamName;

    @Value("${idcomm.counter_metric_type}")
    private String metricType;

    private final PrometheusMeterRegistry registry;
    private final MetricService metricService;

    @Autowired
    public IdcommCounterService(MetricService metricService) {
        CollectorRegistry idcommCounterCollectorRegistry = new CollectorRegistry();
        this.registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT, idcommCounterCollectorRegistry, Clock.SYSTEM);
        this.metricService = metricService;
    }

    public void recordCounter(PromMetric metric, String myPodIP) {
        if (metric.getMetricName() != null && !metric.getMetricName().isEmpty()) {
            ArrayList<Tag> tags = createTags(metric);
            Counter fetchCounter = fetchRegistryCounter(metric.getMetricName(), tags);

            if (fetchCounter == null) {
                if (fetchRegistryCounter(metric.getMetricName(), new ArrayList<>()) == null) {
                    try {
                        Counter newCounter = registerNewCounter(metric, tags);
                        newCounter.increment(metric.getIncrement());
                    } catch (IllegalArgumentException ex) {
                        recordNewVersionedMetric(metric, tags);
                    }
                } else {
                    recordNewVersionedMetric(metric, tags);
                }
            } else {
                fetchCounter.increment(metric.getIncrement());
            }
        }
    }

    private void recordNewVersionedMetric(PromMetric metric, ArrayList<Tag> tags) {
        for (int version = 2; version < 100; version++) {
            Counter fetchExistingCounter = fetchRegistryCounter(metric.getMetricName() + "_v" + version, tags);
            if (fetchExistingCounter == null) {
                if (fetchRegistryCounter(metric.getMetricName() + "_v" + version, new ArrayList<>()) == null) {
                    try {
                        Counter newCounter = registerNewVersionedCounter(metric, tags, version);
                        newCounter.increment(metric.getIncrement());
                        break;
                    } catch (IllegalArgumentException ex) {
                        // Do nothing
                    }
                }
            }
        }
    }

    private ArrayList<Tag> createTags(PromMetric metric) {
        ArrayList<Tag> tags = new ArrayList<>();
        tags.add(new ImmutableTag("application", metric.getApplication()));
        if (metric.getTags() != null) {
            for (Map.Entry<String, String> entry : metric.getTags().entrySet()) {
                tags.add(new ImmutableTag(entry.getKey(), entry.getValue()));
            }
        }
        return tags;
    }

    private Counter fetchRegistryCounter(String metricName, ArrayList<Tag> tags) {
        return registry.find(metricName).tags(tags).counter();
    }

    private Counter registerNewCounter(PromMetric metric, ArrayList<Tag> tags) {
        return Counter.builder(metric.getMetricName())
                      .tags(tags)
                      .description(metric.getDescription())
                      .register(registry);
    }

    private Counter registerNewVersionedCounter(PromMetric metric, ArrayList<Tag> tags, int version) {
        return Counter.builder(metric.getMetricName() + "_v" + version)
                      .tags(tags)
                      .description(metric.getDescription())
                      .register(registry);
    }

    public void idcommLauncherCounterPushMetrics() {
        String prometheusMetrics = registry.scrape();
        boolean success = metricService.postMetrics(prometheusMetrics);
        
        if (!success) {
            log.error("Failed to post metrics after retries");
        }
    }
}
