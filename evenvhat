import pytest
from unittest.mock import patch, MagicMock
from your_script_name import *

# Mocked data for testing
mock_metrics_data = """
# HELP some_metric Some metric help
# TYPE some_metric counter
some_metric{job="example"} 42 1598618359000
"""

# Mocked environment variables
os.environ['CCT_PUSHGATE_URL'] = 'http://example.com'
os.environ['SLEEP_EACH_ENDPOINT'] = '5'
os.environ['SLEEP_EACH_RUN'] = '180'
os.environ['THRESHOLD_METRIC_DEL'] = '15'

# Test get_current_time_cst function
def test_get_current_time_cst():
    current_time = get_current_time_cst()
    assert current_time is not None

# Test get_metrics function
@patch('requests.get')
def test_get_metrics(mock_get):
    mock_response = MagicMock()
    mock_response.text = mock_metrics_data
    mock_get.return_value = mock_response

    metrics_data = get_metrics('http://example.com')

    assert metrics_data == mock_metrics_data

# Test parse_job_metrics function
def test_parse_job_metrics():
    metrics = list(parse_job_metrics(mock_metrics_data))
    assert len(metrics) == 1
    assert metrics[0][0] == 1598618359  # Last push value
    assert metrics[0][1] == '/metrics/example'  # URI combined
    assert metrics[0][2] == '/metrics/example'  # URI with value

# Test delete_job function
@patch('requests.delete')
def test_delete_job(mock_delete):
    mock_response = MagicMock()
    mock_response.status_code = 200
    mock_delete.return_value = mock_response

    delete_job('/metrics/example', 'http://example.com')

    assert mock_delete.call_count == 1

# Test main function
@patch('time.sleep', MagicMock())
@patch('your_script_name.get_metrics')
@patch('your_script_name.parse_job_metrics')
@patch('your_script_name.delete_job')
def test_main(mock_delete_job, mock_parse_job_metrics, mock_get_metrics):
    mock_get_metrics.return_value = mock_metrics_data
    mock_parse_job_metrics.return_value = [(1598618359, '/metrics/example', '/metrics/example')]
    mock_delete_job.return_value = None

    main()

    assert mock_get_metrics.call_count == 1
    assert mock_parse_job_metrics.call_count == 1
    assert mock_delete_job.call_count == 1

# Run the tests
if __name__ == "__main__":
    pytest.main()
